Constructor Chaining:
---------------------
The this() constructor call can be used to invoke the current class constructor (constructor chaining). 
This approach is better if you have many constructors in the class and want to reuse that constructor.
The this() constructor call should be used to reuse the constructor in the constructor.
It maintains the chain between the constructors i.e. it is used for constructor chaining.

Scenario: When we compare c1 and c2, it is checked whether both c1 and c2 refer to same object or not
(object variables are always references in Java). c1 and c2 refer to two different objects, 
hence the value (c1 == c2) is false. If we create another reference say c3 like following, then (c1 == c3) will give true.

Complex c3 = c1;  // (c3 == c1) will be true

Note: this basically returns the current class object

Rule: Call to this() must be the first statement in constructor.

class Student13{  
    int id;  
    String name;  
    Student13(){System.out.println("default constructor is invoked");}  
      
    Student13(int id,String name){  
    this ();//it is used to invoked current class constructor.  And it also must be the first statement inside the consrtctr
    this.id = id;  
    this.name = name;  
    }  
    void display(){System.out.println(id+" "+name);}  
      
    public static void main(String args[]){  
    Student13 e1 = new Student13(111,"karan");  
    Student13 e2 = new Student13(222,"Aryan");  
    e1.display();  
    e2.display();  
   }  
}  
Output:
       default constructor is invoked
       default constructor is invoked
       111 Karan
       222 Aryan


Equals Method : how it works ?
------------------------------
class Complex {
 
    private double re, im;
 
    public Complex(double re, double im) {
        this.re = re;
        this.im = im;
    }
 
    // Overriding equals() to compare two Complex objects
    @Override
    public boolean equals(Object o) {
 
        // If the object is compared with itself then return true  
        if (o == this) {
            return true;
        }
 
        /* Check if o is an instance of Complex or not
          "null instanceof [type]" also returns false */
        if (!(o instanceof Complex)) {
            return false;
        }
         
        // typecast o to Complex so that we can compare data members 
        Complex c = (Complex) o;
         
        // Compare the data members and return accordingly 
        return Double.compare(re, c.re) == 0
                && Double.compare(im, c.im) == 0;   // here we are comparing each element of the class, 
                                                    // but this may not be sufficient, thats why we need to override 
                                                    // hascode method as well .
    }
}
 
// Driver class to test the Complex class
public class Main {
 
    public static void main(String[] args) {
        Complex c1 = new Complex(10, 15);
        Complex c2 = new Complex(10, 15);
        if (c1.equals(c2)) {
            System.out.println("Equal ");
        } else {
            System.out.println("Not Equal ");
        }
    }
}

Output: Equal


STATIC:
------
1.>static local variables are not allowed in Java

class Test {
   public static void main(String args[]) { 
     System.out.println(fun());
   }
   static int fun()
   {
     static int x= 10;  //Error: Static local variables are not allowed
     return x--;
   }
} 

2.>Can we Override static methods in java?
We can declare static methods with same signature in subclass, but it is not considered overriding as there won’t 
be any run-time polymorphism. Hence the answer is ‘No’.

/* Java program to show that if static method is redefined by
   a derived class, then it is not overriding. */
 
// Superclass
class Base {
     
    // Static method in base class which will be hidden in subclass 
    public static void display() {
        System.out.println("Static or class method from Base");
    }
     
     // Non-static method which will be overridden in derived class 
     public void print()  {
         System.out.println("Non-static or Instance method from Base");
    }
}
 
// Subclass
class Derived extends Base {
     
    // This method hides display() in Base 
    public static void display() {
         System.out.println("Static or class method from Derived");
    }
     
    // This method overrides print() in Base 
    public void print() {
         System.out.println("Non-static or Instance method from Derived");
   }
}
 
// Driver class
public class Test {
    public static void main(String args[ ])  {
       Base obj1 = new Derived();
        
       // As per overriding rules this should call to class Derive's static 
       // overridden method. Since static method can not be overridden, it 
       // calls Base's display() 
       obj1.display();  
        
       // Here overriding works and Derive's print() is called 
       obj1.print();     
    }
}
OUTPUT:
Static or class method from Base
Non-static or Instance method from Derived

3.>Can we overload static methods?
The answer is ‘Yes’. We can have two or more static methods with same name, 
but differences in input parameters. For example, consider the following Java program.

// filename Test.java
public class Test {
    public static void foo() {
        System.out.println("Test.foo() called ");
    }
    public static void foo(int a) { 
        System.out.println("Test.foo(int) called ");
    }
    public static void main(String args[])
    { 
        Test.foo();
        Test.foo(10);
    }
}

4.>Can a class be static in Java ?
The answer is YES, we can have static class in java. In java, we have static instance variables 
as well as static methods and also static block. Classes can also be made static in Java.

Java allows us to define a class within another class. Such a class is called a nested class.
The class which enclosed nested class is known as Outer class. In java, we can’t make Top level class static.
Only nested classes can be static.

ACCESS MODIFIERS:
----------------
The four access levels are −
1.Visible to the package, the default. No modifiers are needed.
2.Visible to the class only (private).
3.Visible to the world (public).
4.Visible to the package and all subclasses (protected).

Access Control and Inheritance:
-------------------------------
The following rules for inherited methods are enforced −

Methods declared public in a superclass also must be public in all subclasses.
Methods declared protected in a superclass must either be protected or public in subclasses; they cannot be private.
Methods declared private are not inherited at all, so there is no rule for them.

Can a CLASS be PRIVATE ?
------------------------
Answer: Yes, only the inner class can be private

we can declare java class as private . But tat class wont b accesslible from its outer scope like
public class B{
// member variables and methods
private class C{
// member variables and methods
}
}
now the prob wid dis is only the members of class B can access dis class C
and by OOP design, we want more reusability of code which cant b possble in dis case
//NOTE : We can use private,protected,static,default only with inner class not with the outer class.

HASHMAPs internal working
http://javahungry.blogspot.com/2013/08/hashing-how-hash-map-works-in-java-or.html

Concurrent Hash Map
http://javahungry.blogspot.com/2014/02/hashmap-vs-concurrenthashmap-java-collections-interview-question.html

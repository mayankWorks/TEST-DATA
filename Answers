Constructor Chaining:
---------------------
The this() constructor call can be used to invoke the current class constructor (constructor chaining). 
This approach is better if you have many constructors in the class and want to reuse that constructor.
The this() constructor call should be used to reuse the constructor in the constructor.
It maintains the chain between the constructors i.e. it is used for constructor chaining.

Scenario: When we compare c1 and c2, it is checked whether both c1 and c2 refer to same object or not
(object variables are always references in Java). c1 and c2 refer to two different objects, 
hence the value (c1 == c2) is false. If we create another reference say c3 like following, then (c1 == c3) will give true.

Complex c3 = c1;  // (c3 == c1) will be true

Note: this basically returns the current class object

Rule: Call to this() must be the first statement in constructor.

class Student13{  
    int id;  
    String name;  
    Student13(){System.out.println("default constructor is invoked");}  
      
    Student13(int id,String name){  
    this ();//it is used to invoked current class constructor.  And it also must be the first statement inside the consrtctr
    this.id = id;  
    this.name = name;  
    }  
    void display(){System.out.println(id+" "+name);}  
      
    public static void main(String args[]){  
    Student13 e1 = new Student13(111,"karan");  
    Student13 e2 = new Student13(222,"Aryan");  
    e1.display();  
    e2.display();  
   }  
}  
Output:
       default constructor is invoked
       default constructor is invoked
       111 Karan
       222 Aryan


Equals Method : how it works ?
------------------------------
class Complex {
 
    private double re, im;
 
    public Complex(double re, double im) {
        this.re = re;
        this.im = im;
    }
 
    // Overriding equals() to compare two Complex objects
    @Override
    public boolean equals(Object o) {
 
        // If the object is compared with itself then return true  
        if (o == this) {
            return true;
        }
 
        /* Check if o is an instance of Complex or not
          "null instanceof [type]" also returns false */
        if (!(o instanceof Complex)) {
            return false;
        }
         
        // typecast o to Complex so that we can compare data members 
        Complex c = (Complex) o;
         
        // Compare the data members and return accordingly 
        return Double.compare(re, c.re) == 0
                && Double.compare(im, c.im) == 0;   // here we are comparing each element of the class, 
                                                    // but this may not be sufficient, thats why we need to override 
                                                    // hascode method as well .
    }
}
 
// Driver class to test the Complex class
public class Main {
 
    public static void main(String[] args) {
        Complex c1 = new Complex(10, 15);
        Complex c2 = new Complex(10, 15);
        if (c1.equals(c2)) {
            System.out.println("Equal ");
        } else {
            System.out.println("Not Equal ");
        }
    }
}

Output: Equal
